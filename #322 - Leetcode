class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length + 1;
        int m = amount + 1;
        
        int[][] dp = new int[n][m];
        //Row initialisation
        for(int j = 1; j < m; j++){
            dp[0][j] = 99999;
        }
        //column initialisation
        for(int i = 0; i < n; i++){
            dp[i][0] = 0;
        }
        //Dynamic programming logic
         for(int i = 1; i < n; i++){
             for(int j = 1; j < m; j++){
                 if(j < coins[i - 1]){
                     dp[i][j] = dp[i - 1][j];
                 }
                 else{
                     dp[i][j] = Math.min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
                 }
             }
         }
        return dp[n -1][m -1] == 99999 ? -1 : dp[n - 1][m - 1];
    }
}

//brute force
//generate all possible combinations and check the minimum no of coins that equals to the amount
