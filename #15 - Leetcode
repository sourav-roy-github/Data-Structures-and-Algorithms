class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Arrays.sort(nums);
        List<List<Integer>> output_list = new LinkedList();
        for(int i = 0; i < nums.length - 2; i++){
            if(i == 0 || (i > 0 && nums[i] != nums[i-1])){
                int low = i + 1;
                int high = nums.length - 1;
                int sum = 0 - nums[i];
                while(low < high){
                    if(nums[low] + nums[high] == sum){
                        output_list.add(Arrays.asList(nums[i], nums[low], nums[high]));
                        while(low < high && nums[low] == nums[low + 1]){
                            low++;
                        }
                        while(low < high && nums[high] == nums[high - 1]){
                            high--;
                        }
                        low++;
                        high--;
                        
                    }
                    else if(nums[low] + nums[high] > sum){
                        high--;
                    }
                    else{
                        low++;
                    }
                }
            }
        }
        return output_list;
    }
}

//Simplified
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> output = new ArrayList<>();
        if(nums == null || nums.length < 3) return output;
        //Sorting the array as the order doesn't matter
        Arrays.sort(nums);
        //[-1,0,1,2,-1,-4]
        //fixing i and finding the two sum
        for(int i = 0; i < nums.length - 2; i++){
            if(i > 0 && nums[i] == nums[i - 1])continue;
            //Two Sum
            int left = i + 1, right = nums.length - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                if(sum == 0){
                    output.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    right--;
                    //Avoid duplicates
                    while(left < right && nums[left] == nums[left - 1])left++;
                    while(left < right && nums[right] == nums[right + 1])right--;
                }
                else if(sum > 0) right--;
                else left++;
            }
        }
        return output;
    }
}
