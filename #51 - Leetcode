class Solution {
    public List<List<String>> solveNQueens(int n) {
        //Output list
        List<List<String>> output = new ArrayList<>();
        
        //base case
        if(n == 0) return output;
        
        //Creating a n x n board to place the queens
        //Initially all the positions will be empty which is marked by '.'
        char[][] board = new char[n][n];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                board[i][j] = '.';
            }
        }
        //backtrack function call
        backtrack(output, board, 0, n);
        return output;
    }
    //backtracking logic
    private List<List<String>> backtrack(List<List<String>> output, char[][] board, int i, int n){
        //all of our queens have been placed
        if(n == 0){
            output.add(adding(board));
            return output;
        }
        for(int j = 0; j < board[0].length; j++){
            if(isValid(board, i , j)){
                board[i][j] = 'Q';
                backtrack(output, board, i + 1, n - 1);
                board[i][j] = '.';
            }
        }
        return output;
    }
    
    private List<String> adding(char[][] board){
        List<String> temp_list = new ArrayList<>();
        for(int i = 0; i < board.length; i++){
            String str = "";
            for(int j = 0; j < board[0].length; j++){
                str += board[i][j];
            }
            temp_list.add(str);
        }
        return temp_list;
    }
    //Checking if the queen can be put in that postion
    private boolean isValid(char[][] board, int i, int j){
        int r = i;
        int c = j;
        //Up direction
        while( r >= 0){
            if(board[r][c] == 'Q') return false;
            r--;
        }
        r = i; c = j;
        //Left diagonal
        while(r >= 0  && c >= 0){
            if(board[r][c] == 'Q') return false;
            r--;
            c--;
        }
        //Right Diagonal
        r = i; c = j;
        while(r >= 0  && c < board[0].length){
            if(board[r][c] == 'Q') return false;
            r--;
            c++;
        }
        return true;
    }
}
