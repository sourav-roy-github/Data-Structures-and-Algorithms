class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        List<List<String>> result = new ArrayList<>();
        if(n <= 0) return result;
        char[][] matrix = new char[n][n];
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix.length; j++){
                matrix[i][j] = '.';
            }
        }
        helper(matrix, 0, result);
        return result;
    }
    
    public void helper(char[][] matrix, int row, List<List<String>> result){
        if(row == matrix.length){
            List<String> l = resultGenerator(matrix);
            result.add(l);
            return;
        }
        for(int col = 0; col < matrix.length; col++){
            matrix[row][col] = 'Q';
            if(isValid(matrix, row, col)){
                helper(matrix, row + 1, result);
            }
            matrix[row][col] = '.';
        }
    }
    
    public boolean isValid(char[][] matrix, int x, int y){
        for(int row = 0; row < x; row++){
            for(int col = 0; col < matrix.length; col++){
                if((y == col || Math.abs(x - row) == Math.abs(y - col)) && matrix[row][col] == 'Q'){
                    return false;
                }
            }
        }
        return true;
    }
    
    public static List<String> resultGenerator(char[][] matrix){
        List<String> ls = new ArrayList<>();
        for(int i = 0; i < matrix.length; i++){
            ls.add(new String(matrix[i]));
        }
        return ls;
    }
}
