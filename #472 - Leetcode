class Solution {
     public List<String> findAllConcatenatedWordsInADict(String[] words) {
          List<String> res = new ArrayList<>();
          HashSet<String> hs = new HashSet<>();
          for(String word : words){
              hs.add(word);
          }
         for(String word : words){
             //hs.add(words[i - 1]);
             hs.remove(word);
             if(couldCompose(word, hs)){
                 res.add(word);
             }
             hs.add(word);
         }
         return res;
     }
     
     private boolean couldCompose(String s, Set<String> hs){
         if(s.length() == 0 || hs.size() == 0){
             return false;
         }
         
         int n = s.length();
         boolean [] dp = new boolean[n + 1];
         dp[0] = true;
         for(int i = 1; i <= n; i++){
             for(int j = 0; j < i; j++){
                 if(dp[j] && hs.contains(s.substring(j, i))){
                     dp[i] = true;
                     break;
                 }
             }
         }
         
         return dp[n];
     }
     
 }
 //time - m2n2 space - Max(m,n)
