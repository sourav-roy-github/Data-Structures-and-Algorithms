//Time - O(3 ** m * n) Space - O(m * n)

class Solution {
    public boolean exist(char[][] board, String word) {
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                if(board[i][j] == word.charAt(0) && searchWord(board,i,j,0,word)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean searchWord(char[][] board, int i, int j, int count, String word){
        
        if(count == word.length()) return true;
        
        if(i < 0 || j < 0 || i >= board.length || j >= board[i].length || board[i][j] != word.charAt(count)){
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = ' ';
        boolean found = searchWord(board, i + 1 ,j, count + 1, word) ||
            searchWord(board, i - 1 , j, count + 1, word) ||
            searchWord(board, i , j + 1, count + 1, word) ||
            searchWord(board, i , j - 1, count + 1, word);
        board[i][j] = temp;
        return found;
    }
}


//Alternate
class Solution {
    public boolean exist(char[][] board, String word) {
        //Base Case
        if(board == null || board.length == 0 || board[0].length == 0 || word.length() == 0)
            return false;
        
        //Starting point
        for(int i  = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == word.charAt(0)){
                    if(backtrack(board, i , j, word, 0)) // ***TODO*** 
                        return true;
                }
            }
        }
        return false;
    }
    //4 direction array
    private int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
    
    private boolean backtrack(char[][] board, int i, int j, String word, int index){
        
        if(index == word.length() - 1)
            return true;
        char temp = board[i][j];
        board[i][j] = '*';
        for(int[] dir: dirs){
            int r = i + dir[0];
            int c = j + dir[1];
            if(r >= 0 && r < board.length && c >= 0 && c < board[0].length && board[r][c] == word.charAt(index + 1)){
                if(backtrack(board, r, c, word, index + 1))
                    return true;
            }
        }
        board[i][j] = temp;
        return false;
    }
}
