class Solution {
    public int getFood(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0)
            return -1;
        int m = grid.length, n = grid[0].length;
        
        //Declaration
        Queue<int[]> q = new LinkedList<>();
        //Initialisation - finding the starting point
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '*'){
                    q.add(new int[]{i,j,0});
                    break;
                }
            }
        }
        //Directions array - north, south, east, west
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        
        while(!q.isEmpty()){
            int[] curr_cell = q.poll();
            int step = curr_cell[2];
            for(int[] dir : dirs){
                int i = curr_cell[0] + dir[0];
                int j = curr_cell[1] + dir[1];
                if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 'X')
                    continue;
                if(grid[i][j] == '#')
                    return step + 1;
                grid[i][j] = 'X';
                q.add(new int[]{i , j , step + 1});
            }
        }
        return -1;
    }
}
