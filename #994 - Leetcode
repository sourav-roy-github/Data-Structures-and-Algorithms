class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0)
            return 0;
        int fresh = 0, minutes = 0;
        //Count the no of fresh oranges
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1)
                    fresh++;
                if(grid[i][j] == 2)
                    queue.add(new int[]{i,j});     
            }
        }
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int x = 0; x < size; x++){
                int[] pair = queue.poll();
                for(int[] dir : dirs){
                    int i = dir[0] + pair[0];
                    int j = dir[1] + pair[1];
                    if(i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 1){
                        grid[i][j] = 2;
                        queue.add(new int[]{i,j});
                        fresh--;                        
                    }
                }
            }
            minutes++;
        }
        if(fresh != 0) return -1;
        return minutes > 0 ? minutes - 1 : 0;
    }
}
