class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> output = new ArrayList<>();
        if(s == null || s.length() == 0) return output;
        backtrack(output, 0, s, new ArrayList<>()); // TODO
        return output;
    }
    
    private List<List<String>> backtrack(List<List<String>> output, int index, String s, List<String> path){
        if(index >= s.length()){
            output.add(new ArrayList<>(path));
            return output;  
        }
        for(int i = index; i < s.length(); i++){
            //path.add(s.charAt(index));
            String curr = s.substring(index, i + 1);
            if(isPalindrome(curr)){
                path.add(curr);
                backtrack(output, i + 1, s, path);
                path.remove(path.size() - 1);
            }
        }
      return output;  
    }
    private boolean isPalindrome(String s){
        int left = 0, right = s.length() - 1;
        while(left < right){
            if(s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    } 
} 
