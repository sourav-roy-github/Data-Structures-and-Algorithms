class Solution {
    public int islandPerimeter(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null ||grid[0].length == 0)
            return 0;
        int m = grid.length;
        int n = grid[0].length;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1)
                    return bfs(grid, i , j);
            }
        }
        return 0;
    }
    public int bfs(int[][] grid, int row,  int column){
        int count = 0;
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{row, column});
        grid[row][column] = 2;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int x = 0; x < size; x++){
                int[] pair = queue.poll();
                for(int[] dir : dirs){
                    int i = pair[0] + dir[0];
                    int j = pair[1] + dir[1];
                    if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0){
                        count++;
                    }
                    else if(i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1){
                        grid[i][j] = 2;
                        queue.add(new int[]{i , j});
                    }
                }
            }
        }
        return count;
    }
}
